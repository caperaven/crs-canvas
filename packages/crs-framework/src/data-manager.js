class u{#a;#t;#s;#e=[];get count(){return this.#s}get dataField(){return this.#t}get eventCount(){return this.#e.length}constructor(a,e){this.#a=a,this.#t=e}dispose(){this.#t=null,this.#e=null,this.#s=null}setRecords(a){this.#s=a?.length||0}append(a){this.#s=a}removeIndexes(a){this.#s=a}removeIds(a){this.#s=a}beginTransaction(){return null}commit(){return null}addChangeCallback(a){this.#e.indexOf(a)==-1&&this.#e.push(a)}removeChangeCallback(a){const e=this.#e.indexOf(a);e!=-1&&this.#e.splice(e,1)}async notifyChanges(a){a.managerId=this.#a;for(let e of this.#e)await e(a)}}class h extends u{#a;setRecords(a){this.#a=a,super.setRecords(a)}append(...a){this.#a.push(...a),super.append(this.#a.length)}getAll(){return this.#a}getPage(a,e){return this.#a.slice(a,e)}getByIndex(a){return this.#a[a]}getById(a){return this.#a.find(e=>e[this.dataField]==a)}getIds(a){const e=[];for(const s of a)e.push(this.#a[s][this.dataField]);return e}removeIndexes(a){a.sort((s,t)=>s>t?-1:1);const e=[];for(const s of a)e.push(this.#a[s][this.dataField]),this.#a.splice(s,1);return super.removeIndexes(this.#a.length),{indexes:a,ids:e}}removeIds(a){const e=[];for(const s of a){const t=this.#a.findIndex(r=>r[this.dataField]==s);e.push(t),this.#a.splice(t,1)}return e.sort((s,t)=>s>t?-1:1),super.removeIds(this.#a.length),{indexes:e,ids:a}}updateIndex(a,e){const s=this.#a[a],t=s[this.dataField],r=Object.keys(e);for(const n of r)s[n]=e[n];return{id:t,index:a,changes:e}}updateId(a,e){const s=this.#a.findIndex(n=>n[this.dataField]==a),t=this.#a[s],r=Object.keys(e);for(const n of r)t[n]=e[n];return{id:a,index:s,changes:e}}}class f extends u{setRecords(a){super.setRecords(a)}}const b=Object.freeze({memory:h,indexdb:f}),l=Object.freeze({add:"add",update:"update",delete:"delete",refresh:"refresh"});class w{static async perform(a,e,s,t){await this[a.action]?.(a,e,s,t)}static async register(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.id_field||"id",e,s,t),i=await crs.process.getValue(a.args.type||"indexdb",e,s,t),g=await crs.process.getValue(a.args.records||[],e,s,t);return globalThis.dataManagers||={},globalThis.dataManagers[r]==null&&(globalThis.dataManagers[r]=new b[i](r,n)),globalThis.dataManagers[r].setRecords(g),globalThis.dataManagers[r]}static async dispose(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);globalThis.dataManagers[r].dispose(),delete globalThis.dataManagers[r]}static async set_records(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.records||[],e,s,t),i=globalThis.dataManagers[r];i.setRecords(n),await i.notifyChanges({action:l.refresh,count:i.count})}static async append(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.records||[],e,s,t),i=globalThis.dataManagers[r],g=i.count;i.append(...n),await i.notifyChanges({action:l.add,models:n,index:g,count:n.length})}static async remove(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.indexes,e,s,t),i=await crs.process.getValue(a.args.ids,e,s,t),g=globalThis.dataManagers[r];let d;n!=null?d=g.removeIndexes(n):d=g.removeIds(i),await g.notifyChanges({action:l.delete,indexes:d.indexes,ids:d.ids})}static async update(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.index,e,s,t),i=await crs.process.getValue(a.args.id,e,s,t),g=await crs.process.getValue(a.args.changes,e,s,t),d=globalThis.dataManagers[r];let c;n!=null?c=d.updateIndex(n,g):c=d.updateId(i,g),await d.notifyChanges({action:l.update,id:c.id,index:c.index,changes:c.changes})}static async update_batch(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.batch,e,s,t),i=globalThis.dataManagers[r];i.beginTransaction();for(let g of n){let d;g.index!=null?d=i.updateIndex(g.index,g.changes):d=i.updateId(g.id,g.changes),await i.notifyChanges({action:l.update,index:d.index,id:d.id,model:i.getByIndex(d.index)})}i.commit()}static async get(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.index,e,s,t),i=await crs.process.getValue(a.args.id,e,s,t);return n!=null?globalThis.dataManagers[r].getByIndex(n):globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getById(i)}static async get_page(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.from,e,s,t),i=await crs.process.getValue(a.args.to,e,s,t);return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getPage(n,i)}static async get_all(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getAll()}static async get_ids(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.indexes,e,s,t);return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getIds(n)}static async on_change(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.callback,e,s,t);return globalThis.dataManagers[r].addChangeCallback(n)}static async remove_change(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.callback,e,s,t);return globalThis.dataManagers[r].removeChangeCallback(n)}}crs.intent.data_manager=w;
