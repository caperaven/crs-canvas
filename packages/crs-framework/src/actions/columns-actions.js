class g{static#t="--columns";static async perform(n,t,s,e){await this[n.action]?.(n,t,s,e)}static async add_columns(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.columns,t,s,e);i(o.columns,c),u(o,this.#t,o.columns),await o.addColumnElements?.(c)}static async remove_columns(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.index,t,s,e),a=await crs.process.getValue(n.args.count,t,s,e)||1,m=o.columns.splice(c,a);u(o,this.#t,o.columns);for(const l of m)l.convert.fn=null,l.convert=null;await o.removeColumnElements?.(c,a)}static async move_columns(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.from,t,s,e),a=await crs.process.getValue(n.args.to,t,s,e);await o.moveColumnElement(c,a)}static async clear_columns(n,t,s,e){}static async add_groups(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.groups,t,s,e);i(o.columnGroups,c)}static async remove_group(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.index,t,s,e),a=await crs.process.getValue(n.args.count,t,s,e)||1;o.columnGroups.splice(c,a)}static async move_group(n,t,s,e){}static async set_width(n,t,s,e){const o=await crs.dom.get_element(n,t,s,e),c=await crs.process.getValue(n.args.index,t,s,e),a=await crs.process.getValue(n.args.width,t,s,e);o.columns[c].width=a}}function i(r,n){for(const t of n){if(t.field.indexOf(":")!=-1){if(t.convert=crsbinding.utils.getConverterParts(t.field),t.convert.postExp!=null){const s=`return crsbinding.valueConvertersManager.convert(value, "${t.convert.converter}", "get")`;t.convert.fn=new Function("value",s)}t.field=t.convert.path}r.push(t)}}function u(r,n,t){t=t.map(s=>`${s.width}px`).join(" "),r.style.setProperty(n,t)}crs.intent.grid_columns=g;export{g as ColumnsActions};
