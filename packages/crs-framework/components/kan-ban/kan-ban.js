import{addColumnFeatures as o}from"./columns.js";class r extends crsbinding.classes.BindableElement{#a=[];#t=this.refresh.bind(this);#e=this.#g.bind(this);#s=this.#p.bind(this);get shadowDom(){return!0}get columns(){return this.#a}get html(){return import.meta.url.replace(".js",".html")}async connectedCallback(){await super.connectedCallback(),o(this),await this.#m(),await this.#l()}async disconnectedCallback(){await this.#u();for(const a of this.#a)a.container=null;this.#a=null,this.#e=null,this.#s=null,this.#t=null,await super.disconnectedCallback()}async#l(){await this.observe_changes(),await this.refresh()}async#i(){const a=this.container.querySelectorAll("[data-id]");for(let t of a)t.parentElement.removeChild(t)}async#n(a){const t={};for(;a.children.length>0;){const e=a.firstElementChild;e.setAttribute("role","cell");const n=e.dataset.value;t[n]==null&&(t[n]=this.#a.find(s=>s[this.dataset.field]==n).container),e.parentNode.removeChild(e),t[n].appendChild(e)}}async#r(){const a=await crs.call("data_manager","get_all",{manager:this.dataset.manager}),t=crsbinding.inflationManager.get(this.dataset.template,a);await this.#n(t)}async#c(a){this.#a.length!=0&&(await this.#i(),await this.#r())}async#o(a){const t=crsbinding.inflationManager.get(this.dataset.template,a.models);await this.#n(t)}async#d(a){const t=[];for(let e of a.ids){const n=this.container.querySelector(`[data-id="${e}"]`);n!=null&&t.push(n)}for(let e of t)e.parentElement.removeChild(e)}async#h(a){const t=this.container.querySelector(`[data-id="${a.id}"]`),e=await crs.call("data_manager","get",{manager:this.dataset.manager,id:a.id});crsbinding.inflationManager.get(this.dataset.template,[e],[t])}async refresh(a){switch(a?.action||"refresh"){case"refresh":{await this.#c(a);break}case"add":{await this.#o(a);break}case"delete":{await this.#d(a);break}case"update":{await this.#h(a);break}}}async observe_changes(){await crs.call("data_manager","on_change",{manager:this.dataset.manager,callback:this.#t})}async unobserve_changes(){await crs.call("data_manager","remove_change",{manager:this.dataset.manager,callback:this.#t})}async#m(){await crs.call("dom_interactive","enable_dragdrop",{element:this,options:{drag:{placeholderType:"standard"},drop:{allowDrop:"[role='cell']",allowCallback:this.#e,callback:this.#s},autoScroll:"hv"}})}async#u(){await crs.call("dom_interactive","disable_dragdrop",{element:this})}async#g(a,t){if(this.dataset.allowDrop==null)return!0;const e=i(this.dataset.allowDrop),n=await crs.call("data_manager","get",{manager:this.dataset.manager,id:a.dataset.id}),s={dragElement:a,target:t,model:n};await crs.call("process",e[1],{schema:e[0]},null,null,s);const c=s.result;return s.dragElement=null,s.target=null,s.model=null,c}async#p(a,t){const e=i(this.dataset.onDrop),n=await crs.call("data_manager","get",{manager:this.dataset.manager,id:a.dataset.id}),s={dragElement:a,target:t,model:n};await crs.call("process",e[1],{schema:e[0]},null,null,s),s.dragElement=null,s.target=null,s.model=null}}function i(l){return l.replace("()]","").split("[")}await crs.modules.add("kan_ban",import.meta.url),customElements.define("kan-ban",r);export{r as default};
