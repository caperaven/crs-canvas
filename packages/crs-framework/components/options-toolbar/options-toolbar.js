class s extends HTMLElement{#s;#t;#e;#i;constructor(){super(),this.attachShadow({mode:"open"}),this.#e=this.#n.bind(this)}async connectedCallback(){this.shadowRoot.innerHTML=await fetch(import.meta.url.replace(".js",".html")).then(t=>t.text()),requestAnimationFrame(()=>{this.#s=this.getBoundingClientRect(),this.#t=this.shadowRoot.querySelector(".marker");const t=this.firstElementChild;this.#a(t),this.addEventListener("click",this.#e);const e=setTimeout(()=>{this.#t.style.transition="translate 0.3s ease-out",clearTimeout(e)},.5)})}async disconnectedCallback(){this.removeEventListener("click",this.#e),this.#t=null,this.#s=null,this.#e=null,this.#i=null}async#a(t){const e=t.getBoundingClientRect();this.style.setProperty("--width",`${e.width}px`),this.style.setProperty("--height",`${e.height}px`),this.#t.style.translate=`${e.left-this.#s.left}px 8px`,this.#i?.removeAttribute("aria-selected"),t.setAttribute("aria-selected",!0),this.dataset.value=t.dataset.value,this.#i=t,this.dispatchEvent(new CustomEvent("change",{detail:t.dataset.value}))}async#n(t){t.target.nodeName=="BUTTON"&&await this.#a(t.target)}}customElements.define("options-toolbar",s);
