{"version":3,"file":"crs-html-parser.js","sources":["../../../src/html/managers/base-manager.js","../../../src/html/managers/templates.js","../../../src/html/managers/variables.js","../../../src/html/providers/base-provider.js","../../../src/html/providers/body.js","../../../src/html/providers/raw.js","../../../src/html/providers/template.js","../../../src/common-templates.js","../../../src/html/providers/button.js","../../../src/html/html-parser.js","../../../src/html/html-base-parser.js","../../../src/base-parser.js"],"sourcesContent":["export class BaseManager {\r\n    constructor(parser) {\r\n        this.parser = parser;\r\n        this.isManager = true;\r\n    }\r\n    \r\n    dispose() {\r\n        this.reset();\r\n        delete this.parser;\r\n    }\r\n\r\n    reset() {\r\n    }\r\n\r\n    assert(callback, errors, message) {\r\n        const failed = callback() == true;\r\n\r\n        if (failed) {\r\n            errors.push(message)\r\n        }\r\n\r\n        return !failed;\r\n    }\r\n\r\n    validate(item, errors) {\r\n        if (item.elements != null) {\r\n            for (let element of item.elements) {\r\n                this.parser.validateItem(element, errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        // override to clear\r\n    }\r\n}","import {BaseManager} from \"./base-manager.js\";\r\n\r\nexport default class TemplatesManager extends BaseManager {\r\n    get key() {\r\n        return \"templates\"\r\n    }\r\n\r\n    reset() {\r\n        for (let part of this._parts || []) {\r\n            if (this[part] != null) {\r\n                this[part].clear();\r\n                this[part] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this._parts = [];\r\n        this._load(\"templates\");\r\n    }\r\n\r\n    _load(name) {\r\n        if (this[name] == null) {\r\n            this[name] = new Map();\r\n            this._parts.push(name);\r\n        }\r\n\r\n        const templates = this.parser.schema[name];\r\n        for (let template of templates) {\r\n            if (template.import == null) {\r\n                this[name].set(template.id, template);\r\n            }\r\n            else {\r\n                this._load(template.import);\r\n            }\r\n        }\r\n    }\r\n\r\n    getTemplate(store, id) {\r\n        if(this[store].has(id) == false) throw new Error(`There is no template in the schema for with id \"${id}\"`);\r\n        return this[store].get(id);\r\n    }\r\n\r\n    validate(templates, errors) {\r\n        if (this.assert(() => Array.isArray(templates) == false, errors, \"templates definition must be a array\")) {\r\n            this.initialize(templates);\r\n            this.templates.forEach(item => {\r\n                this.assert(() => item.id == null, errors, \"template must have a valid id property\");\r\n                this.assert(() => item.elements == null, errors, \"template must have a elements property\");\r\n                this.assert(() => Array.isArray(item.elements) != true, errors, \"template elements property should be an array\");\r\n                if (this.assert(() => (item.elements || []).length == 0, errors, \"template elements must contain content\")) {\r\n                    super.validate(item, errors);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}","import {BaseManager} from \"./base-manager.js\";\r\n\r\nexport default class VariablesManager extends BaseManager {\r\n    get key() {\r\n        return \"variables\"\r\n    }\r\n\r\n    get valueProcessor() {\r\n        return true;\r\n    }\r\n\r\n    reset() {\r\n        delete this.variables;\r\n    }\r\n\r\n    initialize(variables) {\r\n        this.variables = variables;\r\n    }\r\n\r\n    process(value) {\r\n        return this.getValue(value);\r\n    }\r\n\r\n    getValue(value) {\r\n        if (typeof value != \"string\" || value.trim()[0] != \"@\") return value;\r\n\r\n        //JHR: make this async and put a catch on it\r\n\r\n        value = value.slice(1);\r\n\r\n        let fn = new Function(\"variables\", `return variables.${value}`);\r\n        const result = fn(this.variables);\r\n        fn = null;\r\n        return result;\r\n    }\r\n}","export class BaseProvider {\r\n    constructor(parser) {\r\n        this.parser = parser;\r\n    }\r\n\r\n    dispose() {\r\n        delete this.parser;\r\n    }\r\n\r\n    /**\r\n     * This function will be called for each provider to do some validation checks if the item can be parsed\r\n     * @param item\r\n     */\r\n    shouldParse(item) {\r\n        return true;\r\n    }\r\n    \r\n    process(item) {\r\n        if (this.styles != null) {\r\n            item.styles = [];\r\n        }\r\n\r\n        const children = this.parser.parseChildren(item);\r\n        const attributes = this.parser.parseAttributes(item);\r\n        const styles = this.parser.parseStyles(item);\r\n        const content = this.parser.parseContent(item);\r\n\r\n        return {\r\n            children: children,\r\n            attributes: attributes,\r\n            styles: styles,\r\n            content: content\r\n        }\r\n    }\r\n\r\n    setValues(str, obj) {\r\n        const keys = Object.keys(obj);\r\n        for (let key of keys) {\r\n            const value = obj[key] != null ? obj[key] : \"\";\r\n            str = str.split(key).join(value);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    validate(item, errors) {\r\n        if (item.elements != null) {\r\n            for (let element of item.elements) {\r\n                this.parser.validateItem(element, errors);\r\n            }\r\n        }\r\n    }\r\n\r\n    assert(callback, errors, message) {\r\n        const failed = callback() == true;\r\n\r\n        if (failed) {\r\n            errors.push(message)\r\n        }\r\n\r\n        return !failed;\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class BodyProvider extends BaseProvider {\r\n    get key() {\r\n        return \"body\"\r\n    }\r\n\r\n    get template() {\r\n        return `__content__`\r\n    }\r\n\r\n    process(item) {\r\n        const parts = super.process(item);\r\n\r\n        return this.setValues(this.template, {\r\n            \"__content__\": parts.children\r\n        })\r\n    }\r\n\r\n    validate(item, errors) {\r\n        this.assert(() => Array.isArray(item), errors, \"Body element must be a object not an array\");\r\n        this.assert(() => item.elements == null, errors, \"elements property required on body\");\r\n        this.assert(() => Array.isArray(item.elements) == false, errors, \"element property on body must be an array\");\r\n\r\n        super.validate(item, errors);\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class RawProvider extends BaseProvider {\r\n    get key() {\r\n        return \"raw\"\r\n    }\r\n\r\n    get template() {\r\n        return `<__element__ __attributes__ __styles__>__content__</__element__>`\r\n    }\r\n\r\n    process(item, key) {\r\n        const parts = super.process(item);\r\n\r\n        return this.setValues(this.template, {\r\n            \"__element__\": key,\r\n            \"__attributes__\": parts.attributes,\r\n            \"__styles__\": parts.styles,\r\n            \"__content__\": parts.children || parts.content || \"\"\r\n        })\r\n    }\r\n\r\n    validate(item, errors) {\r\n        super.validate(item, errors);\r\n    }\r\n}","import {BaseProvider} from \"./base-provider.js\";\r\n\r\nexport default class TemplateProvider extends BaseProvider {\r\n    get key() {\r\n        return \"template\"\r\n    }\r\n\r\n    get template() {\r\n        return `<div __attributes__ __classes__ >\r\n                    __content__\r\n                </div>`;\r\n    }\r\n\r\n\r\n    process(item, key) {\r\n        const manager = this.parser.managers.get(\"templates\");\r\n        if (manager == null) throw new Error(\"templates manager should be registered\");\r\n\r\n        let store =  Object.getOwnPropertyNames(item).find(p=>p.toLowerCase().indexOf(\"template\") !== -1);\r\n        const id = item[store];\r\n\r\n        if (store == \"template\") {\r\n            store = \"templates\";\r\n        }\r\n\r\n        const template = manager.getTemplate(store, id); // NOTE GM: Hardcoded to templates till above comment resolved.\r\n        item.elements = template.elements;\r\n        const parts = super.process(item);\r\n\r\n        return this.setValues(this.template,\r\n            {\r\n                \"__attributes__\": parts.attributes,\r\n                \"__classes__\": parts.styles,\r\n                \"__content__\": parts.children});\r\n    }\r\n\r\n    processTemplate(template) {\r\n        const parts = super.process(template);\r\n        return parts.children;\r\n    }\r\n\r\n    validate(item, errors) {\r\n        this.assert(() => item.template == null, errors, \"template element must have a valid template property\");\r\n    }\r\n}","export const svgLink = `<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"><use xlink:href=\"#__icon__\"/></svg>`;\r\n\r\n\r\n\r\n\r\n\r\n","import {BaseProvider} from \"./base-provider.js\";\r\nimport {svgLink} from \"./../../common-templates.js\";\r\n\r\nexport default class ButtonProvider extends BaseProvider {\r\n    get key() {\r\n        return \"button\"\r\n    }\r\n\r\n    get template() {\r\n        return `<button __attributes__ __styles__>__content__</button>`\r\n    }\r\n\r\n    process(item, key) {\r\n        const parts = super.process(item);\r\n        const caption = this.parser.parseStringValue(item.caption);\r\n        const icon = item.icon == null ? \"\" : svgLink.split(\"__icon__\").join(item.icon);\r\n        const content = item.icon == null ? `<span>${caption}</span>` : `${icon}<span>${caption}</span>`;\r\n\r\n        return this.setValues(this.template, {\r\n            \"__attributes__\": parts.attributes,\r\n            \"__styles__\": parts.styles,\r\n            \"__content__\": content\r\n        })\r\n    }\r\n\r\n    validate(item, errors) {\r\n        this.assert(() => item.caption == null, errors, \"button must have a caption\");\r\n    }\r\n}","import {HTMLBaseParser} from \"./html-base-parser.js\";\r\n\r\nexport class HTMLParser extends HTMLBaseParser {\r\n    addStyleImports(imports) {\r\n        if (Array.isArray(imports)) {\r\n            imports.forEach(imp => this.styleImports.push(imp));\r\n        }\r\n        else\r\n        {\r\n            this.styleImports.push(imports);\r\n        }\r\n    }\r\n\r\n    parse(schema) {\r\n        this.schema = schema;\r\n\r\n        this.init();\r\n\r\n        if (this.providers.has(this.options.root) == false) {\r\n            throw new Error(`schema requires a \"${this.options.root}\" option`);\r\n        }\r\n\r\n        const root = schema[this.options.root];\r\n        if (root == null) throw new Error(`schema should have a property \"${this.options.root}\"`);\r\n\r\n        let result = this.providers.get(this.options.root).process(root);\r\n        result = this.processStyleImports(result);\r\n\r\n        this.managers.forEach(manager => manager.reset());\r\n        delete this.schema;\r\n\r\n        return result;\r\n    }\r\n\r\n    validate(schema, errors) {\r\n        const rootProvider = this.providers.get(this.options.root);\r\n        if (rootProvider == null) {\r\n            errors.push(\"a root provider was not registered\");\r\n        }\r\n\r\n        const keys = Object.keys(schema);\r\n\r\n        for (let key of keys) {\r\n            if (key != this.options.root) {\r\n                if (this.managers.has(key)) {\r\n                    const manager = this.managers.get(key);\r\n                    if (manager.validate != null) {\r\n                        manager.validate(schema[key], errors);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const root = schema[this.options.root];\r\n        rootProvider && rootProvider.validate(root, errors);\r\n    }\r\n\r\n    validateItem(item, errors) {\r\n        const key = item[\"element\"];\r\n        let provider = this.providers.get(key);\r\n\r\n        if (provider == null) {\r\n            provider = this.providers.get(\"raw\");\r\n        }\r\n\r\n        provider.validate && provider.validate(item, errors);\r\n    }\r\n}\r\n\r\nif (typeof self != \"undefined\") {\r\n    self.crs = self.crs || {};\r\n    self.crs.HTMLParser = HTMLParser;\r\n}\r\n","import {BaseParser} from \"./../base-parser.js\";\r\nimport TemplatesManager from \"./managers/templates.js\";\r\nimport VariablesManager from \"./managers/variables.js\";\r\nimport BodyProvider from \"./providers/body.js\";\r\nimport RawProvider from \"./providers/raw.js\";\r\nimport TemplateProvider from \"./providers/template.js\";\r\nimport ButtonProvider from \"./providers/button.js\";\r\n\r\nexport class HTMLBaseParser extends BaseParser {\r\n    constructor(attributes) {\r\n        super(attributes);\r\n        this.styleImports = [];\r\n\r\n        this.options = {\r\n            elementKey: \"element\",\r\n            childrenKey: \"elements\",\r\n            attributesKey: \"attributes\",\r\n            stylesKey: \"styles\",\r\n            root: \"body\",\r\n            contentKey: \"content\"\r\n        };\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n        this.styleImports.length = 0;\r\n        this.options = null;\r\n    }\r\n\r\n    async initialize() {\r\n        this.register(TemplatesManager);\r\n        this.register(VariablesManager);\r\n        this.register(BodyProvider);\r\n        this.register(RawProvider);\r\n        this.register(TemplateProvider);\r\n        this.register(ButtonProvider);\r\n    }\r\n\r\n    parseItem(item, key) {\r\n        if(item == null) return;\r\n        key = key || item[this.options.elementKey];\r\n        if (this.providers.has(key)) {\r\n            const provider = this.providers.get(key);\r\n            if(provider.shouldParse(item) !== false) {\r\n                return provider.process(item);\r\n            }\r\n        }\r\n        else {\r\n            const provider = this.providers.get(\"raw\");\r\n            if(provider.shouldParse(item) !== false) {\r\n                return provider.process(item, key);\r\n            }\r\n        }\r\n    }\r\n\r\n    parseAttributes(item) {\r\n        const attributes = item[this.options.attributesKey];\r\n        if (attributes == null) return null;\r\n\r\n        const result = [];\r\n        Object.entries(attributes).forEach((values) => {\r\n            const key = values[0];\r\n            let value = values[1];\r\n\r\n            value = this.parseStringValue(value, key);\r\n\r\n            result.push(`${key}=\"${value}\"`);\r\n        });\r\n\r\n        return result.join(\" \");\r\n    }\r\n\r\n    parseStyles(item) {\r\n        let styles = item[this.options.stylesKey];\r\n        if (styles == null) return null;\r\n\r\n        if (Array.isArray(styles)) {\r\n            styles = styles.join(\" \");\r\n        }\r\n\r\n        return `class=\"${styles}\"`;\r\n    }\r\n\r\n    parseChildren(item) {\r\n        const children = item[this.options.childrenKey];\r\n        if (children == null) return null;\r\n\r\n        const result = [];\r\n        for (let child of children) {\r\n            result.push(this.parseItem(child));\r\n        }\r\n        return result.join(\"\");\r\n    }\r\n\r\n    parseContent(item) {\r\n        let content = item[this.options.contentKey];\r\n        if (content == null) return null;\r\n\r\n        content = this.parseStringValue(content);\r\n\r\n        return content;\r\n    }\r\n\r\n    parseStringValue(str, key) {\r\n        for (let processor of this.valueProcessors) {\r\n            str = processor.process(str, key);\r\n        }\r\n        return str;\r\n    }\r\n}","export class BaseParser {\r\n    constructor(attributes) {\r\n        this.attributes = attributes;\r\n        this.providers = new Map();\r\n        this.managers = new Map();\r\n\r\n        this.valueProcessors = [];\r\n    }\r\n\r\n    dispose() {\r\n        this.providers.clear();\r\n        delete this.providers;\r\n\r\n        this.managers.clear();\r\n        delete this.managers;\r\n\r\n        this.valueProcessors.length = 0;\r\n        this.options = 0;\r\n    }\r\n\r\n    register(type) {\r\n        const instance = new type(this);\r\n\r\n        if (instance.isManager == true) {\r\n            this.managers.set(instance.key, instance);\r\n            if (instance.valueProcessor == true) {\r\n                this.valueProcessors.push(instance);\r\n            }\r\n        }\r\n        else {\r\n            this.providers.set(instance.key, instance);\r\n        }\r\n    }\r\n\r\n    async load(libraries) {\r\n        for (let library of libraries || []) {\r\n            this.register((await import(library)).default);\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.managers.forEach(value => {\r\n            value.reset && value.reset();\r\n        });\r\n\r\n        const keys = Object.keys(this.schema);\r\n\r\n        for (let key of keys) {\r\n            if (key != this.options.root) {\r\n                if (this.managers.has(key)) {\r\n                    this.managers.get(key).initialize(this.schema[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    processStyleImports(result) {\r\n        if (this.styleImports.length > 0) {\r\n            const imports = [];\r\n            this.styleImports.forEach(style => imports.push(`@import \"${style}\";`));\r\n\r\n            result = `<style>${imports.join(\"\\n\")};</style>${result}`;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    validate() {\r\n\r\n    }\r\n}"],"names":["BaseManager","[object Object]","parser","this","isManager","reset","callback","errors","message","failed","push","item","elements","element","validateItem","TemplatesManager","key","part","_parts","clear","_load","name","Map","templates","schema","template","import","set","id","store","has","Error","get","assert","Array","isArray","initialize","forEach","length","super","validate","VariablesManager","valueProcessor","variables","value","getValue","trim","slice","fn","Function","result","BaseProvider","styles","children","parseChildren","attributes","parseAttributes","parseStyles","content","parseContent","str","obj","keys","Object","split","join","BodyProvider","parts","process","setValues","__content__","RawProvider","__element__","__attributes__","__styles__","TemplateProvider","manager","managers","getOwnPropertyNames","find","p","toLowerCase","indexOf","getTemplate","__classes__","svgLink","ButtonProvider","caption","parseStringValue","icon","HTMLParser","providers","valueProcessors","options","type","instance","libraries","library","register","default","root","styleImports","imports","style","elementKey","childrenKey","attributesKey","stylesKey","contentKey","dispose","provider","shouldParse","entries","values","child","parseItem","processor","imp","init","processStyleImports","rootProvider","self","crs"],"mappings":"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"}