class g{static async perform(s,r,a,n){await this[s.action]?.(s,r,a,n)}static async if_value(s,r,a,n){const t=[];let i=await crs.process.getValue(s.args.exp,r,a,n);i=await crsbinding.expression.sanitize(i).expression;const c=i.split("?").map(l=>l.trim()),o=c[0],e=c[1].split(":");t.push(`if (${o}) {`),t.push(`    return ${e[0].trim()};`),t.push("}"),e.length>1&&(t.push("else {"),t.push(`    return ${e[1].trim()};`),t.push("}"));const p=new Function("context",t.join(`
`));return s.args.target!=null&&await crs.process.setValue(s.args.target,p,r,a,n),p}static async case_value(s,r,a,n){const t=[];let i=await crs.process.getValue(s.args.exp,r,a,n);i=await crsbinding.expression.sanitize(i).expression;const c=i.split(",");for(let u of c){const e=u.split(":").map(p=>p.trim());e[0]=="context.default"?t.push(`return ${e[1]};`):(t.push(`if (${e[0]}) {`),t.push(`    return ${e[1]};`),t.push("}"))}const o=new Function("context",t.join(`
`));return s.args.target!=null&&await crs.process.setValue(s.args.target,o,r,a,n),o}}crs.intent.compile=g;export{g as CompileActions};
