class u{static async perform(a,t,r,s){await this[a.action]?.(a,t,r,s)}static async get(a,t,r,s){if(a.args.url!=null)return a.args.template!=null?await this.#t(a,t,r,s):await this.#a(a,t,r,s);if(a.args.schema!=null)return await this.#r(a,t,r,s);if(a.args.function!=null)return await this.#s(a,t,r,s);if(a.args.markdown!=null)return await crs.call("markdown","to_html",a.args,t,r,s)}static async create(a,t,r,s){const n=a.args.html.indexOf("<")==-1?await crs.process.getValue(a.args.html,t,r,s):a.args.html,l=await crs.process.getValue(a.args.ctx,t,r,s),i=await crs.call("string","inflate",{parameters:l,template:n},t,r,s),e=document.createElement("template");e.innerHTML=i;const c=e.content;return a.args.target!=null&&await crs.process.setValue(args.target,c,t,r,s),c}static async#a(a,t,r,s){const n=await crs.process.getValue(a.args.url,t,r,s);return await fetch(n).then(l=>l.text())}static async#t(a,t,r,s){const n=await crs.process.getValue(a.args.template,t,r,s),l=await crs.process.getValue(a.args.url,t,r,s);return await crsbinding.templates.get(n,l)}static async#r(a,t,r,s){let n=await crs.process.getValue(a.args.schema,t,r,s);return typeof n=="string"&&(n=await fetch(n).then(l=>l.json())),schema?.parser?.parse(n)}static async#s(a,t,r,s){const n=await crs.process.getValue(a.args.function,t,r,s),l=await crs.process.getValue(a.args.parameters||[],t,r,s);return await n(...l)}}crs.intent.html=u;export{u as HtmlActions};
